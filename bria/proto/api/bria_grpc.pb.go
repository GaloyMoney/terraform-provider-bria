// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: api/bria.proto

package briav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BriaService_CreateProfile_FullMethodName            = "/services.bria.v1.BriaService/CreateProfile"
	BriaService_ListProfiles_FullMethodName             = "/services.bria.v1.BriaService/ListProfiles"
	BriaService_CreateProfileApiKey_FullMethodName      = "/services.bria.v1.BriaService/CreateProfileApiKey"
	BriaService_ImportXpub_FullMethodName               = "/services.bria.v1.BriaService/ImportXpub"
	BriaService_ListXpubs_FullMethodName                = "/services.bria.v1.BriaService/ListXpubs"
	BriaService_SetSignerConfig_FullMethodName          = "/services.bria.v1.BriaService/SetSignerConfig"
	BriaService_SubmitSignedPsbt_FullMethodName         = "/services.bria.v1.BriaService/SubmitSignedPsbt"
	BriaService_CreateWallet_FullMethodName             = "/services.bria.v1.BriaService/CreateWallet"
	BriaService_ListWallets_FullMethodName              = "/services.bria.v1.BriaService/ListWallets"
	BriaService_GetWalletBalanceSummary_FullMethodName  = "/services.bria.v1.BriaService/GetWalletBalanceSummary"
	BriaService_NewAddress_FullMethodName               = "/services.bria.v1.BriaService/NewAddress"
	BriaService_UpdateAddress_FullMethodName            = "/services.bria.v1.BriaService/UpdateAddress"
	BriaService_ListAddresses_FullMethodName            = "/services.bria.v1.BriaService/ListAddresses"
	BriaService_GetAddress_FullMethodName               = "/services.bria.v1.BriaService/GetAddress"
	BriaService_ListUtxos_FullMethodName                = "/services.bria.v1.BriaService/ListUtxos"
	BriaService_CreatePayoutQueue_FullMethodName        = "/services.bria.v1.BriaService/CreatePayoutQueue"
	BriaService_ListPayoutQueues_FullMethodName         = "/services.bria.v1.BriaService/ListPayoutQueues"
	BriaService_UpdatePayoutQueue_FullMethodName        = "/services.bria.v1.BriaService/UpdatePayoutQueue"
	BriaService_TriggerPayoutQueue_FullMethodName       = "/services.bria.v1.BriaService/TriggerPayoutQueue"
	BriaService_EstimatePayoutFee_FullMethodName        = "/services.bria.v1.BriaService/EstimatePayoutFee"
	BriaService_SubmitPayout_FullMethodName             = "/services.bria.v1.BriaService/SubmitPayout"
	BriaService_ListPayouts_FullMethodName              = "/services.bria.v1.BriaService/ListPayouts"
	BriaService_GetPayout_FullMethodName                = "/services.bria.v1.BriaService/GetPayout"
	BriaService_CancelPayout_FullMethodName             = "/services.bria.v1.BriaService/CancelPayout"
	BriaService_GetBatch_FullMethodName                 = "/services.bria.v1.BriaService/GetBatch"
	BriaService_GetAccountBalanceSummary_FullMethodName = "/services.bria.v1.BriaService/GetAccountBalanceSummary"
	BriaService_SubscribeAll_FullMethodName             = "/services.bria.v1.BriaService/SubscribeAll"
)

// BriaServiceClient is the client API for BriaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BriaServiceClient interface {
	CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*CreateProfileResponse, error)
	ListProfiles(ctx context.Context, in *ListProfilesRequest, opts ...grpc.CallOption) (*ListProfilesResponse, error)
	CreateProfileApiKey(ctx context.Context, in *CreateProfileApiKeyRequest, opts ...grpc.CallOption) (*CreateProfileApiKeyResponse, error)
	ImportXpub(ctx context.Context, in *ImportXpubRequest, opts ...grpc.CallOption) (*ImportXpubResponse, error)
	ListXpubs(ctx context.Context, in *ListXpubsRequest, opts ...grpc.CallOption) (*ListXpubsResponse, error)
	SetSignerConfig(ctx context.Context, in *SetSignerConfigRequest, opts ...grpc.CallOption) (*SetSignerConfigResponse, error)
	SubmitSignedPsbt(ctx context.Context, in *SubmitSignedPsbtRequest, opts ...grpc.CallOption) (*SubmitSignedPsbtResponse, error)
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error)
	ListWallets(ctx context.Context, in *ListWalletsRequest, opts ...grpc.CallOption) (*ListWalletsResponse, error)
	GetWalletBalanceSummary(ctx context.Context, in *GetWalletBalanceSummaryRequest, opts ...grpc.CallOption) (*GetWalletBalanceSummaryResponse, error)
	NewAddress(ctx context.Context, in *NewAddressRequest, opts ...grpc.CallOption) (*NewAddressResponse, error)
	UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*UpdateAddressResponse, error)
	ListAddresses(ctx context.Context, in *ListAddressesRequest, opts ...grpc.CallOption) (*ListAddressesResponse, error)
	GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*GetAddressResponse, error)
	ListUtxos(ctx context.Context, in *ListUtxosRequest, opts ...grpc.CallOption) (*ListUtxosResponse, error)
	CreatePayoutQueue(ctx context.Context, in *CreatePayoutQueueRequest, opts ...grpc.CallOption) (*CreatePayoutQueueResponse, error)
	ListPayoutQueues(ctx context.Context, in *ListPayoutQueuesRequest, opts ...grpc.CallOption) (*ListPayoutQueuesResponse, error)
	UpdatePayoutQueue(ctx context.Context, in *UpdatePayoutQueueRequest, opts ...grpc.CallOption) (*UpdatePayoutQueueResponse, error)
	TriggerPayoutQueue(ctx context.Context, in *TriggerPayoutQueueRequest, opts ...grpc.CallOption) (*TriggerPayoutQueueResponse, error)
	EstimatePayoutFee(ctx context.Context, in *EstimatePayoutFeeRequest, opts ...grpc.CallOption) (*EstimatePayoutFeeResponse, error)
	SubmitPayout(ctx context.Context, in *SubmitPayoutRequest, opts ...grpc.CallOption) (*SubmitPayoutResponse, error)
	ListPayouts(ctx context.Context, in *ListPayoutsRequest, opts ...grpc.CallOption) (*ListPayoutsResponse, error)
	GetPayout(ctx context.Context, in *GetPayoutRequest, opts ...grpc.CallOption) (*GetPayoutResponse, error)
	CancelPayout(ctx context.Context, in *CancelPayoutRequest, opts ...grpc.CallOption) (*CancelPayoutResponse, error)
	GetBatch(ctx context.Context, in *GetBatchRequest, opts ...grpc.CallOption) (*GetBatchResponse, error)
	GetAccountBalanceSummary(ctx context.Context, in *GetAccountBalanceSummaryRequest, opts ...grpc.CallOption) (*GetAccountBalanceSummaryResponse, error)
	SubscribeAll(ctx context.Context, in *SubscribeAllRequest, opts ...grpc.CallOption) (BriaService_SubscribeAllClient, error)
}

type briaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBriaServiceClient(cc grpc.ClientConnInterface) BriaServiceClient {
	return &briaServiceClient{cc}
}

func (c *briaServiceClient) CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*CreateProfileResponse, error) {
	out := new(CreateProfileResponse)
	err := c.cc.Invoke(ctx, BriaService_CreateProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briaServiceClient) ListProfiles(ctx context.Context, in *ListProfilesRequest, opts ...grpc.CallOption) (*ListProfilesResponse, error) {
	out := new(ListProfilesResponse)
	err := c.cc.Invoke(ctx, BriaService_ListProfiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briaServiceClient) CreateProfileApiKey(ctx context.Context, in *CreateProfileApiKeyRequest, opts ...grpc.CallOption) (*CreateProfileApiKeyResponse, error) {
	out := new(CreateProfileApiKeyResponse)
	err := c.cc.Invoke(ctx, BriaService_CreateProfileApiKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briaServiceClient) ImportXpub(ctx context.Context, in *ImportXpubRequest, opts ...grpc.CallOption) (*ImportXpubResponse, error) {
	out := new(ImportXpubResponse)
	err := c.cc.Invoke(ctx, BriaService_ImportXpub_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briaServiceClient) ListXpubs(ctx context.Context, in *ListXpubsRequest, opts ...grpc.CallOption) (*ListXpubsResponse, error) {
	out := new(ListXpubsResponse)
	err := c.cc.Invoke(ctx, BriaService_ListXpubs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briaServiceClient) SetSignerConfig(ctx context.Context, in *SetSignerConfigRequest, opts ...grpc.CallOption) (*SetSignerConfigResponse, error) {
	out := new(SetSignerConfigResponse)
	err := c.cc.Invoke(ctx, BriaService_SetSignerConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briaServiceClient) SubmitSignedPsbt(ctx context.Context, in *SubmitSignedPsbtRequest, opts ...grpc.CallOption) (*SubmitSignedPsbtResponse, error) {
	out := new(SubmitSignedPsbtResponse)
	err := c.cc.Invoke(ctx, BriaService_SubmitSignedPsbt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briaServiceClient) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error) {
	out := new(CreateWalletResponse)
	err := c.cc.Invoke(ctx, BriaService_CreateWallet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briaServiceClient) ListWallets(ctx context.Context, in *ListWalletsRequest, opts ...grpc.CallOption) (*ListWalletsResponse, error) {
	out := new(ListWalletsResponse)
	err := c.cc.Invoke(ctx, BriaService_ListWallets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briaServiceClient) GetWalletBalanceSummary(ctx context.Context, in *GetWalletBalanceSummaryRequest, opts ...grpc.CallOption) (*GetWalletBalanceSummaryResponse, error) {
	out := new(GetWalletBalanceSummaryResponse)
	err := c.cc.Invoke(ctx, BriaService_GetWalletBalanceSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briaServiceClient) NewAddress(ctx context.Context, in *NewAddressRequest, opts ...grpc.CallOption) (*NewAddressResponse, error) {
	out := new(NewAddressResponse)
	err := c.cc.Invoke(ctx, BriaService_NewAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briaServiceClient) UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*UpdateAddressResponse, error) {
	out := new(UpdateAddressResponse)
	err := c.cc.Invoke(ctx, BriaService_UpdateAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briaServiceClient) ListAddresses(ctx context.Context, in *ListAddressesRequest, opts ...grpc.CallOption) (*ListAddressesResponse, error) {
	out := new(ListAddressesResponse)
	err := c.cc.Invoke(ctx, BriaService_ListAddresses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briaServiceClient) GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*GetAddressResponse, error) {
	out := new(GetAddressResponse)
	err := c.cc.Invoke(ctx, BriaService_GetAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briaServiceClient) ListUtxos(ctx context.Context, in *ListUtxosRequest, opts ...grpc.CallOption) (*ListUtxosResponse, error) {
	out := new(ListUtxosResponse)
	err := c.cc.Invoke(ctx, BriaService_ListUtxos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briaServiceClient) CreatePayoutQueue(ctx context.Context, in *CreatePayoutQueueRequest, opts ...grpc.CallOption) (*CreatePayoutQueueResponse, error) {
	out := new(CreatePayoutQueueResponse)
	err := c.cc.Invoke(ctx, BriaService_CreatePayoutQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briaServiceClient) ListPayoutQueues(ctx context.Context, in *ListPayoutQueuesRequest, opts ...grpc.CallOption) (*ListPayoutQueuesResponse, error) {
	out := new(ListPayoutQueuesResponse)
	err := c.cc.Invoke(ctx, BriaService_ListPayoutQueues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briaServiceClient) UpdatePayoutQueue(ctx context.Context, in *UpdatePayoutQueueRequest, opts ...grpc.CallOption) (*UpdatePayoutQueueResponse, error) {
	out := new(UpdatePayoutQueueResponse)
	err := c.cc.Invoke(ctx, BriaService_UpdatePayoutQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briaServiceClient) TriggerPayoutQueue(ctx context.Context, in *TriggerPayoutQueueRequest, opts ...grpc.CallOption) (*TriggerPayoutQueueResponse, error) {
	out := new(TriggerPayoutQueueResponse)
	err := c.cc.Invoke(ctx, BriaService_TriggerPayoutQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briaServiceClient) EstimatePayoutFee(ctx context.Context, in *EstimatePayoutFeeRequest, opts ...grpc.CallOption) (*EstimatePayoutFeeResponse, error) {
	out := new(EstimatePayoutFeeResponse)
	err := c.cc.Invoke(ctx, BriaService_EstimatePayoutFee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briaServiceClient) SubmitPayout(ctx context.Context, in *SubmitPayoutRequest, opts ...grpc.CallOption) (*SubmitPayoutResponse, error) {
	out := new(SubmitPayoutResponse)
	err := c.cc.Invoke(ctx, BriaService_SubmitPayout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briaServiceClient) ListPayouts(ctx context.Context, in *ListPayoutsRequest, opts ...grpc.CallOption) (*ListPayoutsResponse, error) {
	out := new(ListPayoutsResponse)
	err := c.cc.Invoke(ctx, BriaService_ListPayouts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briaServiceClient) GetPayout(ctx context.Context, in *GetPayoutRequest, opts ...grpc.CallOption) (*GetPayoutResponse, error) {
	out := new(GetPayoutResponse)
	err := c.cc.Invoke(ctx, BriaService_GetPayout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briaServiceClient) CancelPayout(ctx context.Context, in *CancelPayoutRequest, opts ...grpc.CallOption) (*CancelPayoutResponse, error) {
	out := new(CancelPayoutResponse)
	err := c.cc.Invoke(ctx, BriaService_CancelPayout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briaServiceClient) GetBatch(ctx context.Context, in *GetBatchRequest, opts ...grpc.CallOption) (*GetBatchResponse, error) {
	out := new(GetBatchResponse)
	err := c.cc.Invoke(ctx, BriaService_GetBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briaServiceClient) GetAccountBalanceSummary(ctx context.Context, in *GetAccountBalanceSummaryRequest, opts ...grpc.CallOption) (*GetAccountBalanceSummaryResponse, error) {
	out := new(GetAccountBalanceSummaryResponse)
	err := c.cc.Invoke(ctx, BriaService_GetAccountBalanceSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briaServiceClient) SubscribeAll(ctx context.Context, in *SubscribeAllRequest, opts ...grpc.CallOption) (BriaService_SubscribeAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &BriaService_ServiceDesc.Streams[0], BriaService_SubscribeAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &briaServiceSubscribeAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BriaService_SubscribeAllClient interface {
	Recv() (*BriaEvent, error)
	grpc.ClientStream
}

type briaServiceSubscribeAllClient struct {
	grpc.ClientStream
}

func (x *briaServiceSubscribeAllClient) Recv() (*BriaEvent, error) {
	m := new(BriaEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BriaServiceServer is the server API for BriaService service.
// All implementations must embed UnimplementedBriaServiceServer
// for forward compatibility
type BriaServiceServer interface {
	CreateProfile(context.Context, *CreateProfileRequest) (*CreateProfileResponse, error)
	ListProfiles(context.Context, *ListProfilesRequest) (*ListProfilesResponse, error)
	CreateProfileApiKey(context.Context, *CreateProfileApiKeyRequest) (*CreateProfileApiKeyResponse, error)
	ImportXpub(context.Context, *ImportXpubRequest) (*ImportXpubResponse, error)
	ListXpubs(context.Context, *ListXpubsRequest) (*ListXpubsResponse, error)
	SetSignerConfig(context.Context, *SetSignerConfigRequest) (*SetSignerConfigResponse, error)
	SubmitSignedPsbt(context.Context, *SubmitSignedPsbtRequest) (*SubmitSignedPsbtResponse, error)
	CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error)
	ListWallets(context.Context, *ListWalletsRequest) (*ListWalletsResponse, error)
	GetWalletBalanceSummary(context.Context, *GetWalletBalanceSummaryRequest) (*GetWalletBalanceSummaryResponse, error)
	NewAddress(context.Context, *NewAddressRequest) (*NewAddressResponse, error)
	UpdateAddress(context.Context, *UpdateAddressRequest) (*UpdateAddressResponse, error)
	ListAddresses(context.Context, *ListAddressesRequest) (*ListAddressesResponse, error)
	GetAddress(context.Context, *GetAddressRequest) (*GetAddressResponse, error)
	ListUtxos(context.Context, *ListUtxosRequest) (*ListUtxosResponse, error)
	CreatePayoutQueue(context.Context, *CreatePayoutQueueRequest) (*CreatePayoutQueueResponse, error)
	ListPayoutQueues(context.Context, *ListPayoutQueuesRequest) (*ListPayoutQueuesResponse, error)
	UpdatePayoutQueue(context.Context, *UpdatePayoutQueueRequest) (*UpdatePayoutQueueResponse, error)
	TriggerPayoutQueue(context.Context, *TriggerPayoutQueueRequest) (*TriggerPayoutQueueResponse, error)
	EstimatePayoutFee(context.Context, *EstimatePayoutFeeRequest) (*EstimatePayoutFeeResponse, error)
	SubmitPayout(context.Context, *SubmitPayoutRequest) (*SubmitPayoutResponse, error)
	ListPayouts(context.Context, *ListPayoutsRequest) (*ListPayoutsResponse, error)
	GetPayout(context.Context, *GetPayoutRequest) (*GetPayoutResponse, error)
	CancelPayout(context.Context, *CancelPayoutRequest) (*CancelPayoutResponse, error)
	GetBatch(context.Context, *GetBatchRequest) (*GetBatchResponse, error)
	GetAccountBalanceSummary(context.Context, *GetAccountBalanceSummaryRequest) (*GetAccountBalanceSummaryResponse, error)
	SubscribeAll(*SubscribeAllRequest, BriaService_SubscribeAllServer) error
	mustEmbedUnimplementedBriaServiceServer()
}

// UnimplementedBriaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBriaServiceServer struct {
}

func (UnimplementedBriaServiceServer) CreateProfile(context.Context, *CreateProfileRequest) (*CreateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfile not implemented")
}
func (UnimplementedBriaServiceServer) ListProfiles(context.Context, *ListProfilesRequest) (*ListProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProfiles not implemented")
}
func (UnimplementedBriaServiceServer) CreateProfileApiKey(context.Context, *CreateProfileApiKeyRequest) (*CreateProfileApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfileApiKey not implemented")
}
func (UnimplementedBriaServiceServer) ImportXpub(context.Context, *ImportXpubRequest) (*ImportXpubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportXpub not implemented")
}
func (UnimplementedBriaServiceServer) ListXpubs(context.Context, *ListXpubsRequest) (*ListXpubsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListXpubs not implemented")
}
func (UnimplementedBriaServiceServer) SetSignerConfig(context.Context, *SetSignerConfigRequest) (*SetSignerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSignerConfig not implemented")
}
func (UnimplementedBriaServiceServer) SubmitSignedPsbt(context.Context, *SubmitSignedPsbtRequest) (*SubmitSignedPsbtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSignedPsbt not implemented")
}
func (UnimplementedBriaServiceServer) CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedBriaServiceServer) ListWallets(context.Context, *ListWalletsRequest) (*ListWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWallets not implemented")
}
func (UnimplementedBriaServiceServer) GetWalletBalanceSummary(context.Context, *GetWalletBalanceSummaryRequest) (*GetWalletBalanceSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletBalanceSummary not implemented")
}
func (UnimplementedBriaServiceServer) NewAddress(context.Context, *NewAddressRequest) (*NewAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAddress not implemented")
}
func (UnimplementedBriaServiceServer) UpdateAddress(context.Context, *UpdateAddressRequest) (*UpdateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddress not implemented")
}
func (UnimplementedBriaServiceServer) ListAddresses(context.Context, *ListAddressesRequest) (*ListAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddresses not implemented")
}
func (UnimplementedBriaServiceServer) GetAddress(context.Context, *GetAddressRequest) (*GetAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (UnimplementedBriaServiceServer) ListUtxos(context.Context, *ListUtxosRequest) (*ListUtxosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUtxos not implemented")
}
func (UnimplementedBriaServiceServer) CreatePayoutQueue(context.Context, *CreatePayoutQueueRequest) (*CreatePayoutQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayoutQueue not implemented")
}
func (UnimplementedBriaServiceServer) ListPayoutQueues(context.Context, *ListPayoutQueuesRequest) (*ListPayoutQueuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPayoutQueues not implemented")
}
func (UnimplementedBriaServiceServer) UpdatePayoutQueue(context.Context, *UpdatePayoutQueueRequest) (*UpdatePayoutQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePayoutQueue not implemented")
}
func (UnimplementedBriaServiceServer) TriggerPayoutQueue(context.Context, *TriggerPayoutQueueRequest) (*TriggerPayoutQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerPayoutQueue not implemented")
}
func (UnimplementedBriaServiceServer) EstimatePayoutFee(context.Context, *EstimatePayoutFeeRequest) (*EstimatePayoutFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimatePayoutFee not implemented")
}
func (UnimplementedBriaServiceServer) SubmitPayout(context.Context, *SubmitPayoutRequest) (*SubmitPayoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitPayout not implemented")
}
func (UnimplementedBriaServiceServer) ListPayouts(context.Context, *ListPayoutsRequest) (*ListPayoutsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPayouts not implemented")
}
func (UnimplementedBriaServiceServer) GetPayout(context.Context, *GetPayoutRequest) (*GetPayoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayout not implemented")
}
func (UnimplementedBriaServiceServer) CancelPayout(context.Context, *CancelPayoutRequest) (*CancelPayoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPayout not implemented")
}
func (UnimplementedBriaServiceServer) GetBatch(context.Context, *GetBatchRequest) (*GetBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatch not implemented")
}
func (UnimplementedBriaServiceServer) GetAccountBalanceSummary(context.Context, *GetAccountBalanceSummaryRequest) (*GetAccountBalanceSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountBalanceSummary not implemented")
}
func (UnimplementedBriaServiceServer) SubscribeAll(*SubscribeAllRequest, BriaService_SubscribeAllServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeAll not implemented")
}
func (UnimplementedBriaServiceServer) mustEmbedUnimplementedBriaServiceServer() {}

// UnsafeBriaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BriaServiceServer will
// result in compilation errors.
type UnsafeBriaServiceServer interface {
	mustEmbedUnimplementedBriaServiceServer()
}

func RegisterBriaServiceServer(s grpc.ServiceRegistrar, srv BriaServiceServer) {
	s.RegisterService(&BriaService_ServiceDesc, srv)
}

func _BriaService_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriaServiceServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriaService_CreateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriaServiceServer).CreateProfile(ctx, req.(*CreateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriaService_ListProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriaServiceServer).ListProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriaService_ListProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriaServiceServer).ListProfiles(ctx, req.(*ListProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriaService_CreateProfileApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProfileApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriaServiceServer).CreateProfileApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriaService_CreateProfileApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriaServiceServer).CreateProfileApiKey(ctx, req.(*CreateProfileApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriaService_ImportXpub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportXpubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriaServiceServer).ImportXpub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriaService_ImportXpub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriaServiceServer).ImportXpub(ctx, req.(*ImportXpubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriaService_ListXpubs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListXpubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriaServiceServer).ListXpubs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriaService_ListXpubs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriaServiceServer).ListXpubs(ctx, req.(*ListXpubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriaService_SetSignerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSignerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriaServiceServer).SetSignerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriaService_SetSignerConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriaServiceServer).SetSignerConfig(ctx, req.(*SetSignerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriaService_SubmitSignedPsbt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitSignedPsbtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriaServiceServer).SubmitSignedPsbt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriaService_SubmitSignedPsbt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriaServiceServer).SubmitSignedPsbt(ctx, req.(*SubmitSignedPsbtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriaService_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriaServiceServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriaService_CreateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriaServiceServer).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriaService_ListWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriaServiceServer).ListWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriaService_ListWallets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriaServiceServer).ListWallets(ctx, req.(*ListWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriaService_GetWalletBalanceSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletBalanceSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriaServiceServer).GetWalletBalanceSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriaService_GetWalletBalanceSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriaServiceServer).GetWalletBalanceSummary(ctx, req.(*GetWalletBalanceSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriaService_NewAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriaServiceServer).NewAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriaService_NewAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriaServiceServer).NewAddress(ctx, req.(*NewAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriaService_UpdateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriaServiceServer).UpdateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriaService_UpdateAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriaServiceServer).UpdateAddress(ctx, req.(*UpdateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriaService_ListAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriaServiceServer).ListAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriaService_ListAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriaServiceServer).ListAddresses(ctx, req.(*ListAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriaService_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriaServiceServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriaService_GetAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriaServiceServer).GetAddress(ctx, req.(*GetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriaService_ListUtxos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUtxosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriaServiceServer).ListUtxos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriaService_ListUtxos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriaServiceServer).ListUtxos(ctx, req.(*ListUtxosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriaService_CreatePayoutQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePayoutQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriaServiceServer).CreatePayoutQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriaService_CreatePayoutQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriaServiceServer).CreatePayoutQueue(ctx, req.(*CreatePayoutQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriaService_ListPayoutQueues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPayoutQueuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriaServiceServer).ListPayoutQueues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriaService_ListPayoutQueues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriaServiceServer).ListPayoutQueues(ctx, req.(*ListPayoutQueuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriaService_UpdatePayoutQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePayoutQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriaServiceServer).UpdatePayoutQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriaService_UpdatePayoutQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriaServiceServer).UpdatePayoutQueue(ctx, req.(*UpdatePayoutQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriaService_TriggerPayoutQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerPayoutQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriaServiceServer).TriggerPayoutQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriaService_TriggerPayoutQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriaServiceServer).TriggerPayoutQueue(ctx, req.(*TriggerPayoutQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriaService_EstimatePayoutFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimatePayoutFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriaServiceServer).EstimatePayoutFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriaService_EstimatePayoutFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriaServiceServer).EstimatePayoutFee(ctx, req.(*EstimatePayoutFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriaService_SubmitPayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitPayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriaServiceServer).SubmitPayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriaService_SubmitPayout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriaServiceServer).SubmitPayout(ctx, req.(*SubmitPayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriaService_ListPayouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPayoutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriaServiceServer).ListPayouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriaService_ListPayouts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriaServiceServer).ListPayouts(ctx, req.(*ListPayoutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriaService_GetPayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriaServiceServer).GetPayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriaService_GetPayout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriaServiceServer).GetPayout(ctx, req.(*GetPayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriaService_CancelPayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriaServiceServer).CancelPayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriaService_CancelPayout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriaServiceServer).CancelPayout(ctx, req.(*CancelPayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriaService_GetBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriaServiceServer).GetBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriaService_GetBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriaServiceServer).GetBatch(ctx, req.(*GetBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriaService_GetAccountBalanceSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountBalanceSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriaServiceServer).GetAccountBalanceSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriaService_GetAccountBalanceSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriaServiceServer).GetAccountBalanceSummary(ctx, req.(*GetAccountBalanceSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriaService_SubscribeAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BriaServiceServer).SubscribeAll(m, &briaServiceSubscribeAllServer{stream})
}

type BriaService_SubscribeAllServer interface {
	Send(*BriaEvent) error
	grpc.ServerStream
}

type briaServiceSubscribeAllServer struct {
	grpc.ServerStream
}

func (x *briaServiceSubscribeAllServer) Send(m *BriaEvent) error {
	return x.ServerStream.SendMsg(m)
}

// BriaService_ServiceDesc is the grpc.ServiceDesc for BriaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BriaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.bria.v1.BriaService",
	HandlerType: (*BriaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProfile",
			Handler:    _BriaService_CreateProfile_Handler,
		},
		{
			MethodName: "ListProfiles",
			Handler:    _BriaService_ListProfiles_Handler,
		},
		{
			MethodName: "CreateProfileApiKey",
			Handler:    _BriaService_CreateProfileApiKey_Handler,
		},
		{
			MethodName: "ImportXpub",
			Handler:    _BriaService_ImportXpub_Handler,
		},
		{
			MethodName: "ListXpubs",
			Handler:    _BriaService_ListXpubs_Handler,
		},
		{
			MethodName: "SetSignerConfig",
			Handler:    _BriaService_SetSignerConfig_Handler,
		},
		{
			MethodName: "SubmitSignedPsbt",
			Handler:    _BriaService_SubmitSignedPsbt_Handler,
		},
		{
			MethodName: "CreateWallet",
			Handler:    _BriaService_CreateWallet_Handler,
		},
		{
			MethodName: "ListWallets",
			Handler:    _BriaService_ListWallets_Handler,
		},
		{
			MethodName: "GetWalletBalanceSummary",
			Handler:    _BriaService_GetWalletBalanceSummary_Handler,
		},
		{
			MethodName: "NewAddress",
			Handler:    _BriaService_NewAddress_Handler,
		},
		{
			MethodName: "UpdateAddress",
			Handler:    _BriaService_UpdateAddress_Handler,
		},
		{
			MethodName: "ListAddresses",
			Handler:    _BriaService_ListAddresses_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _BriaService_GetAddress_Handler,
		},
		{
			MethodName: "ListUtxos",
			Handler:    _BriaService_ListUtxos_Handler,
		},
		{
			MethodName: "CreatePayoutQueue",
			Handler:    _BriaService_CreatePayoutQueue_Handler,
		},
		{
			MethodName: "ListPayoutQueues",
			Handler:    _BriaService_ListPayoutQueues_Handler,
		},
		{
			MethodName: "UpdatePayoutQueue",
			Handler:    _BriaService_UpdatePayoutQueue_Handler,
		},
		{
			MethodName: "TriggerPayoutQueue",
			Handler:    _BriaService_TriggerPayoutQueue_Handler,
		},
		{
			MethodName: "EstimatePayoutFee",
			Handler:    _BriaService_EstimatePayoutFee_Handler,
		},
		{
			MethodName: "SubmitPayout",
			Handler:    _BriaService_SubmitPayout_Handler,
		},
		{
			MethodName: "ListPayouts",
			Handler:    _BriaService_ListPayouts_Handler,
		},
		{
			MethodName: "GetPayout",
			Handler:    _BriaService_GetPayout_Handler,
		},
		{
			MethodName: "CancelPayout",
			Handler:    _BriaService_CancelPayout_Handler,
		},
		{
			MethodName: "GetBatch",
			Handler:    _BriaService_GetBatch_Handler,
		},
		{
			MethodName: "GetAccountBalanceSummary",
			Handler:    _BriaService_GetAccountBalanceSummary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeAll",
			Handler:       _BriaService_SubscribeAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/bria.proto",
}
